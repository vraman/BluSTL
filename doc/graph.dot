/* Created by mdot for Matlab */
digraph m2html {
  grid_system -> grid_system;
  grid_system -> STLC_lti;
  test_grid_system -> grid_system;
  hvac_room -> hvac_room;
  hvac_room -> STLC_lti;
  init_hvac_room_data -> get_temp_bnd;
  test_hvac_room -> hvac_room;
  Init_Quads -> getSpecs;
  envLTL -> getNotAP;
  envLTL -> getPoly;
  envLTL -> mergePoly;
  envPt2Pt -> getNotAP;
  envPt2Pt -> getPoly;
  envPt2Pt -> mergePoly;
  getSpecs -> envLTL;
  init_plot -> envLTL;
  init_plot -> plotEnv;
  quad_plot -> envLTL;
  quad_plot -> plotEnv;
  quad_system -> getSpecs;
  quad_system -> quad_plot;
  quad_system -> quad_system;
  quad_system -> STLC_lti;
  test_quads -> quad_system;
  signal_generator -> signal_generator;
  signal_generator -> signal_generator;
  signal_generator -> STLC_lti;
  test_encodings -> signal_generator;
  test_encodings -> signal_generator;
  test_signal_generator -> signal_generator;
  test_signal_generator -> signal_generator;
  simple_cars -> simple_cars;
  simple_cars -> STLC_lti;
  test_simple_cars -> simple_cars;
  signal_generator -> signal_generator;
  signal_generator -> signal_generator;
  signal_generator -> STLC_lti;
  tutorial1 -> STLC_lti;
  STL2MILP_boolean -> STL2MILP_boolean;
  STL2MILP_robust -> STL2MILP_robust;
  STL2MILP_robust_interval -> STL2MILP_robust_interval;
  STLC_get_adversary -> STL2MILP_robust;
  STLC_get_adversary -> STLC_parse_stl_labels;
  STLC_get_adversary -> STLformula;
  STLC_get_controller -> STL2MILP_boolean;
  STLC_get_controller -> STL2MILP_robust;
  STLC_get_controller -> STL2MILP_robust_interval;
  STLC_get_controller -> STLC_parse_stl_labels;
  STLC_get_controller -> STLformula;
  STLC_lti -> STLC_get_adversary;
  STLC_lti -> STLC_get_controller;
  STLC_lti -> STLC_lti;
  STLC_lti -> STLC_run_adversarial;
  STLC_lti -> STLC_run_deterministic;
  STLC_lti -> STLC_run_open_loop;
  STLC_lti -> STLC_run_open_loop_adv;
  STLC_lti -> STLC_sensing;
  STLC_lti -> STLC_update_plot;
  STLC_run_adversarial -> system_step;
  STLC_run_deterministic -> system_step;
  STLC_run_open_loop -> system_step;
  STLC_run_open_loop_adv -> system_step;
  STLformula -> STLformula;
  STLformula -> STLdisp;
  STLformula -> STLdisplay;
  STLformula -> STLparse;
  STLparse -> STLformula;
  STLparse -> STLparse;

  grid_system [URL="examples/grid_system/grid_system.html"];
  test_grid_system [URL="examples/grid_system/test_grid_system.html"];
  get_temp_bnd [URL="examples/hvac_room/get_temp_bnd.html"];
  hvac_room [URL="examples/hvac_room/hvac_room.html"];
  init_hvac_room_data [URL="examples/hvac_room/init_hvac_room_data.html"];
  test_hvac_room [URL="examples/hvac_room/test_hvac_room.html"];
  Init_Quads [URL="examples/quadrotor/Init_Quads.html"];
  envLTL [URL="examples/quadrotor/env/envLTL.html"];
  envPt2Pt [URL="examples/quadrotor/env/envPt2Pt.html"];
  getNotAP [URL="examples/quadrotor/env/getNotAP.html"];
  getPoly [URL="examples/quadrotor/env/getPoly.html"];
  mergePoly [URL="examples/quadrotor/env/mergePoly.html"];
  plotEnv [URL="examples/quadrotor/env/plotEnv.html"];
  getObjective [URL="examples/quadrotor/getObjective.html"];
  getSpecs [URL="examples/quadrotor/getSpecs.html"];
  getSpecs2 [URL="examples/quadrotor/getSpecs2.html"];
  init_hist_and_plot_data [URL="examples/quadrotor/init_hist_and_plot_data.html"];
  init_plot [URL="examples/quadrotor/init_plot.html"];
  quad_plot [URL="examples/quadrotor/quad_plot.html"];
  quad_system [URL="examples/quadrotor/quad_system.html"];
  system_step [URL="examples/quadrotor/system_step.html"];
  test_quads [URL="examples/quadrotor/test_quads.html"];
  update_hist_data_and_plot [URL="examples/quadrotor/update_hist_data_and_plot.html"];
  signal_generator [URL="examples/signal_generator/signal_generator.html"];
  test_encodings [URL="examples/signal_generator/test_encodings.html"];
  test_signal_generator [URL="examples/signal_generator/test_signal_generator.html"];
  init_plot [URL="examples/simple_cars/init_plot.html"];
  simple_cars [URL="examples/simple_cars/simple_cars.html"];
  test_simple_cars [URL="examples/simple_cars/test_simple_cars.html"];
  signal_generator [URL="examples/tutorials/signal_generator.html"];
  tutorial1 [URL="examples/tutorials/tutorial1.html"];
  STL2MILP_boolean [URL="src/STL2MILP_boolean.html"];
  STL2MILP_robust [URL="src/STL2MILP_robust.html"];
  STL2MILP_robust_interval [URL="src/STL2MILP_robust_interval.html"];
  STLC_get_adversary [URL="src/STLC_get_adversary.html"];
  STLC_get_controller [URL="src/STLC_get_controller.html"];
  STLC_lti [URL="src/STLC_lti.html"];
  STLC_parse_stl_labels [URL="src/STLC_parse_stl_labels.html"];
  STLC_run_adversarial [URL="src/STLC_run_adversarial.html"];
  STLC_run_deterministic [URL="src/STLC_run_deterministic.html"];
  STLC_run_open_loop [URL="src/STLC_run_open_loop.html"];
  STLC_run_open_loop_adv [URL="src/STLC_run_open_loop_adv.html"];
  STLC_sensing [URL="src/STLC_sensing.html"];
  STLC_update_plot [URL="src/STLC_update_plot.html"];
  STLformula [URL="src/STLformula.html"];
  STLdisp [URL="src/private/STLdisp.html"];
  STLdisplay [URL="src/private/STLdisplay.html"];
  STLparse [URL="src/private/STLparse.html"];
}